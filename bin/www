#!/usr/bin/env node

/**
 * Module dependencies.
 */
var fs = require('fs');
var path = require('path');
var app = require('../app');
var debug = require('debug')('tw-server:server');
var https = require('https');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var sslPort = normalizePort(process.env.sslPort || '8443');
var port = normalizePort(process.env.PORT || '8080');

app.set('port', port);
app.set('SSLport', port);

/**
 * Create HTTP server.
 */

var sslOpts;

if (process.env.NODE_ENV === 'development') {
    console.log('\nfiring server up at https://localhost:8443 and :8080 /\n')
    sslOpts = {
        key: fs.readFileSync( 'bin/localhost.key', 'utf8' ),
        cert: fs.readFileSync( 'bin/localhost.cert', 'utf8' )
    }
} else {
    sslOpts = {
        key: fs.readFileSync( '/var/ssl/wanted-tuts.key', 'utf8' ),
        cert: fs.readFileSync( '/var/ssl/wanted-tuts.cert', 'utf8' )
    }
}

var httpServer = http.createServer(app);
var server = https.createServer(sslOpts, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(sslPort);
server.on('error', onError, sslPort);
server.on('listening', onListening);
httpServer.on('error', onError, port);
httpServer.on('listening', onListening);
httpServer.listen(port);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error, port) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
